openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/laviddichterman/WOrder/1.0.0
info:
  description: |
    This is the backend server API for Wario Order Service, the guts of
    Windy City Pie.
  version: "1.0.0"
  title: WOrder
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: dave@windycitypie.com
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    WClientData:
      description: Client metadata used for logging
      type: object
      properties:
        load_time:
          type: string
          format: date-time
          description: User load time, in UTC
        submit_time:
          type: string
          format: date-time
          description: User submit time, in UTC
        time_selection_time:
          type: string
          format: date-time
          description: User time selection time, in UTC
        user_agent:
          type: string
          description: Browser user agent
    WProduct:
      description: A product (good, or service).
      type: object
      properties:
        display_name:
          type: string
          description: Printable name for the product
        shortcode:
          type: string
          description: Hashable unique name for the product
        description:
          type: string
          description: Printable description of the product, can be null/empty
        price:
          type: number
          format: double
          description: Computed price of the product, including all subproducts. Not treated as canonical.
    WProductQuantity:
      description: A tuple of a WProduct with an integer quantity
      type: object
      properties:
        item:
          $ref: '#/components/schemas/WProduct'
        quantity:
          type: integer
          format: int64
    WOption:
      description: A WProduct whose availablity can be enabled/disabled via a function.
      allOf:
        - $ref: '#/components/schemas/WProduct'
        - type: object
          properties:
            enable_function_name:
              type: string
    WToppingPlacement:
      description: The location of a topping on the pizza
      type: string
      enum:
        - none
        - left
        - right
        - whole
    WTopping:
      allOf:
        - $ref: '#/components/schemas/WOption'
        - type: object
          properties:
            idx:
              type: integer
              format: int32
            flavor_factor:
              type: number
              format: double
              description: The amount this topping contributes to a varied flavor
            bake_factor:
              type: number
              format: double
              description: The amount this topping contributes to the weight
    WPlacedTopping:
      description: A tuple of a WTopping and a WToppingPlacement
      type: object
      properties:
        placement:
          $ref: '#/components/schemas/WToppingPlacement'
        topping:
          $ref: '#/components/schemas/WTopping'
    WPizza:
      description: A product (pizza) with crust, cheese, sauce options and a topping configuration.
      allOf:
        - $ref: '#/components/schemas/WProduct'
        - type: object
          properties:
            toppings:
              type: array
              items:
                $ref: '#/components/schemas/WPlacedTopping'
            crust:
              $ref: '#/components/schemas/WOption'
            cheese:
              $ref: '#/components/schemas/WOption'
            sauce:
              $ref: '#/components/schemas/WOption'
    WSalad:
      description: Ya don't make specializations with salad.
      allOf:
        - $ref: '#/components/schemas/WProduct'
        - type: object
          properties:
            placeholder:
              type: string
    WService:
      description: A service provided.
      allOf:
        - $ref: '#/components/schemas/WProduct'
        - type: object
          properties:
            promise_time_start:
              type: string
              format: date-time
            promise_time_end:
              type: string
              format: date-time
            service_type:
              type: string
              description: Type of service requested
              enum:
                - dine
                - pickup
                - delivery
    WOrder:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/WProductQuantity'
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        service:
          $ref: '#/components/schemas/WService'
        promise_time:
          type: string
          format: date-time
        client_data:
          $ref: '#/components/schemas/WClientData'
paths:
  /ping:
    get:
      summary: Checks if the server is running.
      tags:
        - Admin
      responses:
        "200":
          description: Server is running.
        default:
          description: No bueno.
  /order/byid:
    get:
      tags:
        - Orders
      summary: Gets an order by its ID.
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: >
            the order ID is used to return the matching WOrder, if any
      operationId: getOrderById
      responses:
        "404":
          description: OK. No orders found.
        "200":
          description: OK. Matching order found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WOrder'
  /order/bydate:
    get:
      tags:
        - Orders
      summary: >
        Gets all orders with service time starting between
        start and end, inclusive.
      parameters:
        - in: query
          name: start
          schema:
            type: string
            format: date-time
          required: true
          description: >
            The start date and time from which to search orders.
            Timezone is assumed to be UTC.
        - in: query
          name: end
          schema:
            type: string
            format: date-time
          required: true
          description: >
            The end date and time from which to search orders.
            Timezone is assumed to be UTC.
      operationId: getOrdersByStartTime
      responses:
        "404":
          description: OK. No orders found.
        "200":
          description: OK. Search successful, yielded results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WOrder'
